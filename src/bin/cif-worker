#!perl

BEGIN {
    use FindBin;
    use local::lib "$FindBin::Bin/..";
}

use strict;
use warnings;
use feature 'say';

use CIF qw/init_logging $Logger parse_config/;
use CIF::Worker;
use CIF::Client;
use Getopt::Long;
use AnyEvent;
use Daemon::Control;
use Try::Tiny;
use Data::Dumper;
use Time::HiRes qw/usleep/;

my $help;
my $remote          = CIF::Worker::ROUTER;
my $publisher       = CIF::Worker::PUBLISHER;
my $token;
my $config          = "$CIF::EtcPath/cif-worker.yml";

# daemon
my $daemon          = 0;
my $pidfile         = $CIF::PidPath.'/cif-worker.pid';
my $user            = $CIF::CIF_USER;
my $group           = $CIF::CIF_GROUP;
my $threads         = 8;

# notification
my $notify;
my $notify_to       = 'root@localhost';
my $notify_subj     = '[cif-worker] ERROR';
my $notify_from     = 'cif';
my $notify_level    = 'error';

# logging
my $debug           = 0;
my $verbosity       = 0;
my $logging         = 0;
my $logfile         = $CIF::LogPath.'/cif-worker.log';
my $retries         = 5;

Getopt::Long::Configure ("bundling");
GetOptions(
    'help|h'        => \$help, 
    'config|C=s'    => \$config,
    'remote=s'      => \$remote,
    'publisher=s'   => \$publisher,
    'token=s'       => \$token,
    'retries=i'     => \$retries,
    
    # daemon opts
    'daemon|D'      => \$daemon,
    'pidfile|p=s'   => \$pidfile,
    'user|u=s'      => \$user,
    'group|g=s'     => \$group,
    'threads|t=i'   => \$threads,
    
    #notification
    'notify'        => \$notify,
    'notify-to=s'   => \$notify_to,
    'notify-subj=s' => \$notify_subj,
    'notify-from=s' => \$notify_from,
    'notify-level=s'=> \$notify_level,
    
    # logging
    'verbosity|v+'  => \$verbosity,
    'debug|d'       => \$debug,
    'logging'       => \$logging,
    'logfile=s'     => \$logfile,
) or die(usage());

die(usage()) if($help);

sub usage {
    return <<EOF;

Usage: $0 [OPTIONS] [status|start|stop|restart|reload]

 Options:
    --remote=STRING         specify a remote to connect to, default $remote
    --token=STRING          specify a default token/apikey to use
    --publisher=STRING      specify a remote publisher to connect to and receive data, default $publisher
 
    -C,  --config=FILE       specify cofiguration file, default: $config
    -d,  --debug             turn on debugging (max verbosity)
    -v+, --verbosity         turn up verbosity
    -h,  --help              this message
    
    --retries                specify number of times to retry cif-router before giving up
    
 Daemon Options:
    -D, --daemon            run as daemon
    -u, --user              run daemon as user, default: $user
    -g, --group             run daemon as group, default: $group
    -p, --pid               pidfile location, default: $pidfile
    --logging               turn on logging [to file]
    --logfile               logfile location, default: $logfile
    
 Notification Options:
    --notify:               turn on notification, default: off.
    --notify-to:            default: $notify_to
    --notify-from:          default: $notify_from
    --notify-subj:          default: $notify_subj
    --notify-level:         default: $notify_level

 Examples:
    $0 -C $config
    $0 -D start -C $config -p $pidfile

EOF
}

if(-e $config){
    $config = parse_config($config);
    $config = $config->{'client'};
    
    $token      = $config->{'token'} if($config->{'token'} && !$token);
    $remote     = $config->{'remote'} if($config->{'remote'} && ($remote eq CIF::Worker::ROUTER));
    $publisher  = $config->{'publisher'} if($config->{'publisher'} && ($publisher eq CIF::Worker::PUBLISHER));
} else {
    $Logger->info('config: '.$config.' does not exist...');
}

my $loglevel = ($debug) ? 'DEBUG' : 'INFO';

if($notify){
    $notify = { 
        to          => $notify_to, 
        from        => $notify_from, 
        subject     => $notify_subj, 
        min_level   => lc($notify_level) }
}

init_logging(
    { 
        level       => $loglevel,
        filename    => ($logging) ? $logfile : 0,
    },
    $notify,   
);

if($verbosity){
    unless($debug){ # we're already at TRACE
        $Logger->more_logging($verbosity);
    }
}


my $cli = CIF::Client->new({
    remote  => $remote,
    token   => $token,
});

my $ret;

do {
    $Logger->info('testing cif-router connection...');
    $ret = $cli->ping({ timeout => 5000 });
    
    unless($ret){
        $Logger->info('router unavailable.. ');
        warn 'cif-router unavailable, waiting to retry ' . $retries . ' more times...';
        $Logger->info('waiting...');
        sleep(5);
    }
    
    if($ret == -1){
        $Logger->fatal('unauthorized...');
        exit(-1);
    }
    $retries--;
    if($retries == 0){
        my $errmsg = 'router unavailable, giving up';
        warn $errmsg;
        $Logger->fatal($errmsg);
        exit(-1);
    }
} until($ret);

$Logger->info('testing token with cif-router...');
unless($cli->ping_write()){
    $Logger->fatal('check to make sure the cif-worker token has --write permissions: '.$token);
    exit(-1);
}

if($daemon){
    $ARGV[0] = 'start' unless($ARGV);
    my $r = Daemon::Control->new(
        name    => 'cif-worker',
        program => sub { main() },
        
        pid_file    => $pidfile,
        fork        => 2,
        
        user         => $user,
        group        => $group,
    )->run();
} else {
    main();
}

$Logger->info('shutting down...');

sub main {
    my $master = CIF::Worker->new({ 
        publisher   => $publisher,
        token       => $token,
        router      => $remote,
    });
    $master->workers_socket;
    
    my @workers;
    for(my $count = 1; $count <= $threads; $count++){
        my $pid = fork();
        if($pid){
            # parent
            #print "pid is $pid, parent $$\n";
            push(@workers, $pid);
        } elsif ($pid == 0) {
            # child
            workers($count);
            exit 0;
        } else {
            die "couldnt fork: $!\n";
        }
    }
    
    my $done = AnyEvent->condvar();
    $SIG{'TERM'} = $SIG{'INT'} = sub {
        $Logger->info('received INT for master...'); 
        $done->send(); 
    };
    
    my $msg;
    my $count = 0;
    my $batch = 500;
    my $x = $master->start_subscriber(sub {
        while($master->subscriber_socket->has_pollin() && !$done->ready()){
            $msg = $master->subscriber_socket->recv();
            $Logger->debug('recieved msg...');
            $msg = $master->decode($msg);
            foreach (@$msg){
                $Logger->debug('sending to worker...');
                $master->workers_socket->send($master->encode($_));
                $count++;
                if($count > 0 && ($count % $batch) == 0){
                    $Logger->info($batch . ' messages sent to workers...');
                }
            }
            $msg = undef;
        }
    });
    
    unless($x){
        $done->send();
        exit(0);
    }
    
    $done->recv();
    
    $Logger->info('signaling INT for workers...');
    foreach (@workers) {
        kill INT => $_;
        my $tmp = waitpid($_, 0);
    }
}

sub workers {
    $Logger->info('staring worker..');

    my $d    = AnyEvent->condvar();
    
    $SIG{'INT'} = sub {
        $Logger->info('['.$$.'] worker received INT.. exiting'); 
        $d->send(); 
    };
    
    my $worker = CIF::Worker->new({
        router      => $remote,
        token       => $token,
    });
    
    $worker->data_socket;
    my $err;
    my $msg;

    my $rv = $worker->start_worker(sub {
       while($worker->data_socket->has_pollin() && !$d->ready){
           $msg = $worker->data_socket->recv();
           $Logger->debug('worker received msg...');
           try {
                $worker->process($msg);
           } catch {
                $err = shift;
           };
           if($err && $err !~ /SIGINT/){
                $Logger->error($err);
                $Logger->error(Dumper($msg));
                $err = '';
           }
           $msg = undef;
       }
   });

   $d->recv();
}
